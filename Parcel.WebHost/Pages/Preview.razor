@using ChartJs.Blazor;
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Util
@using Nodify
@using Parcel.Shared
@using Parcel.Shared.DataTypes
@using Parcel.Shared.Framework
@using Parcel.Shared.Framework.ViewModels
@using System.Windows
@using System.Dynamic
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.LineChart
@using Parcel.Shared.Framework.ViewModels.BaseNodes
@using System.Drawing
@page "/preview"

<h3>Preview</h3>

<Chart Config="_config"></Chart>

<h3>Data Set</h3>

@if (WebHostRuntime.Singleton.LastNode != null)
{
    var node = WebHostRuntime.Singleton.LastNode;
    OutputConnector output = node.MainOutput;
    if (node.HasCache(output))
    {
        ConnectorCacheDescriptor cache = node[output];
        switch (cache.DataType)
        {
            case CacheDataType.Generic:
            case CacheDataType.Boolean:
            case CacheDataType.Number:
            case CacheDataType.String:
                <h3>Value</h3>
                <p>@($"{cache.DataObject}")</p>
                break;
            case CacheDataType.ParcelDataGrid:
                DataGrid dataGrid = cache.DataObject as DataGrid;
                List<dynamic> objects = dataGrid.Rows;
                Dictionary<string, DataGrid.ColumnInfo> columnInfo = dataGrid.GetColumnInfoForDisplay();

                // Collect column names
                IEnumerable<IDictionary<string, object>> rows = objects.OfType<IDictionary<string, object>>();
                string[] dataGridDataColumns = rows.SelectMany(d => d.Keys).Distinct(StringComparer.OrdinalIgnoreCase).ToArray();
                // Generate columns
                <table class="table">
                    <tr>
                        @foreach (string columnName in dataGridDataColumns)
                        {
                            <th>@FormatHeader(columnName, columnInfo[columnName].TypeName)</th>
                        }
                    </tr>
                    @foreach (ExpandoObject edo in objects)
                    {
                        var dict = ((IDictionary<string, object>) edo);
                        <tr>
                        @foreach (KeyValuePair<string,object> keyValuePair in dict)
                        {
                            <td>@keyValuePair.Value</td>                            
                        }
                        </tr>
                    }
                </table>
                break;
            default:
                <h3>No preview is available for this node.</h3>
                break;
        }
    }
}

@code {
    private LineConfig _config;

    #region Events
    protected override void OnInitialized()
    {
        if (WebHostRuntime.Singleton.LastNode != null)
        {
            InitializeChart(WebHostRuntime.Singleton.LastNode);
        }
    }
    #endregion

    #region Routines
    private void InitializeChart(ProcessorNode node)
    {
    // Example: https://github.com/mariusmuntean/ChartJs.Blazor/blob/master/ChartJs.Blazor.Samples/Client/Pages/Scales/Time/Line.razor
        
        _config = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = node != null ? node.Title : "Node Result Preview"
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Hover = new Hover
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date"
                            },
                            Time = new TimeOptions
                            {
                                TooltipFormat = "ll HH:mm"
                            },
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Value"
                            }
                        }
                    }
                }
            }
        };

        // Configure labels
        // _config.Data.Labels.AddRange(GetNextDays(InitalCount).Select(d => d.ToString("o")));
        // foreach (string color in new[] { "Red", "Yellow", "Green", "Blue" }) // Pie Chart example
        // {
        //     _config.Data.Labels.Add(color);
        // }

        // Initialize data
        // PieDataset<int> dataset = new PieDataset<int>(new[] { 6, 5, 3, 7 })
        // {
        //     BackgroundColor = new[]
        //     {
        //         ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
        //         ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
        //         ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
        //         ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
        //     }
        // };
        
        OutputConnector output = node.MainOutput;
        if (node.HasCache(output))
        {
            ConnectorCacheDescriptor cache = node[output];
            if (cache.DataType != CacheDataType.ParcelDataGrid) return;
            
            DataGrid dataGrid = cache.DataObject as DataGrid;
            DateTime[] timeColumn = null;
            foreach (DataColumn column in dataGrid!.Columns)
            {
                if (column.Type == typeof(double))
                {
                    var data = column.GetDataAs<double>();
                    if (timeColumn == null)
                    {
                        IDataset<double> lineDataset = new LineDataset<double>()
                        {
                            Label = column.Header,
                            BackgroundColor = ColorUtil.FromDrawingColor(Color.Salmon),
                            BorderColor = ColorUtil.FromDrawingColor(Color.Salmon),
                            Fill = FillingMode.Disabled
                        };
                        _config.Data.Datasets.Add(lineDataset);
                    }
                    else
                    {
                        IDataset<TimePoint> timePoints = new LineDataset<TimePoint>()
                        {
                            Label = column.Header,
                            BackgroundColor = ColorUtil.FromDrawingColor(Color.SeaGreen),
                            BorderColor = ColorUtil.FromDrawingColor(Color.SeaGreen),
                            Fill = FillingMode.Disabled
                        };

                        var dataArray = data.ToArray();
                        for (int t = 0; t < timeColumn.Length; t++)
                        {
                            DateTime time = timeColumn[t];
                            timePoints.Add(new TimePoint(time, dataArray[t]));
                        }

                        _config.Data.Datasets.Add(timePoints);
                    }
                }
                else if (column.Type == typeof(DateTime))
                {
                    timeColumn = column.GetDataAs<DateTime>().ToArray();
                }
            }
        }
    }
    #endregion

    #region Helpers
    string FormatHeader(string header, string typeName)
    {
        return $"{header} ({typeName})";
    }
    #endregion
}